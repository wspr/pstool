\immediate\write18{makeindex -r \jobname}
\immediate\write18{makeindex -r -s gmglo.ist -o \jobname.gls \jobname.glo}

\makeatletter
\documentclass{article}
\usepackage{xcolor}
\usepackage[colorlinks]{hyperref}
\usepackage{gmdoc}

\stanzaskip=\bigskipamount

\begin{obeyspaces}%
\gdef\CodeSpacesGrey{%
\def\gmd@DoTeXCodeSpace{%
\obeyspaces\def {\texttt{\color{gray}\char`\ }}}%
\def\gmd@texcodespace{\texttt{\color{gray}\char`\ }}}%
\end{obeyspaces}
\CodeSpacesGrey

\let\pkg\textsf
\def\pkgopt#1{\texttt{[#1]}}

\def\PDF{\textsc{pdf}}
\def\PS{\textsc{ps}}
\def\DVI{\textsc{dvi}}
\def\EPS{\textsc{eps}}

\usepackage{amsmath}
\usepackage{pstool}
\usepackage[T1]{fontenc}
\usepackage{microtype}
\usepackage{lmodern}
\usepackage[sc,osf]{mathpazo}
\GetFileInfo{pstool.sty}
\date{\fileversion\qquad\filedate}
\begin{document}

\title{The pstool package}
\author{Will Robertson and Zebb Prime}
\maketitle

\tableofcontents

\part{Documentation}

\section{Introduction}

While pdf\/\LaTeX\ is a great improvement in many ways over the `old method' of \DVI$\to$\PS$\to$\PDF, it loses the ability to interface with a generic PostScript workflow, used to great effect in numerous packages, most notably \pkg{PSTricks} and \pkg{psfrag}.

Until now, the best way to use these packages while running pdf\/\LaTeX\ has been to use the \pkg{pst-pdf} package, which processes the entire document through a filter, sending each relevant PostScript environment through \DVI$\to$\PS$\to$\PDF. The resulting \PDF\ versions of each image are then included into the pdf\/\LaTeX\ document. The \pkg{auto-pst-pdf} package provided a wrapper to execute this separate process automatically.

The disadvantage in this route is that for every document compilation, \emph{every} graphic must be re-processed. The \pkg{pstool} package uses a different approach to allow each graphic to be processed only as-needed, speeding up and simplifying the typesetting of the main document.

\section{Processing modes}

The main command provided by this package is\\\hspace*{4em}\cmd\psfig\arg[graphicx options]\arg{filename}\arg{graphic data}.\\ By default it can be used in the following modes:
\begin{description}
\item[\cs{psfig}] Process the graphic \<filename> if no \PDF\ of the same name exists, or the source \EPS\ file is \emph{newer} than the \PDF;
\item[\cs{psfig*}] Always process this figure; and,
\item[\cs{psfig!}] Never process this figure.
\end{description}
The following package options override the above:
\pkgopt{process=all},
\pkgopt{process=none} (the default is \pkgopt{process=auto}).

\section{Cropping graphics}
Graphics are cropped to the appropriate size with the \pkg{preview} package. Sometimes, however, this will not be good enough when an inserted label protrudes from the natural bounding box of the figure. A good way to solve this problem is to use the \pkg{pdfcrop} program (requires a Perl installation under Windows). This can be activated in \pkg{pstool} with the \pkgopt{pdfcrop} package option.

\section{Todo}
\begin{enumerate}
\item Use \verb|dir /h & call echo ^%ERRORLEVEL^%|.
\item Higher commands (\cmd\psfragfig, \cmd\matlabfig, \cmd\mathfig)
\item Generalise "olding" code for multiple files.
\item Basic \EPS$\to$\PDF\ processing (no need to read in the document preamble).
\item Check for correct behaviour in shells other than bash.
\item More flexible usage (support things like \verb|\begin{postscript}| in \pkg{pst-pdf}).
\item mylatex integration
\end{enumerate}

\part{Implementation}
\parindent=0pt
\DocInput{pstool.sty}
\end{document}

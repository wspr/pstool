\immediate\write18{makeindex -r \jobname}
\immediate\write18{makeindex -r -s gmglo.ist -o \jobname.gls \jobname.glo}

\makeatletter
\documentclass{article}
\usepackage{xcolor}
\usepackage[colorlinks]{hyperref}
\usepackage{gmdoc}

\stanzaskip=\bigskipamount

\begin{obeyspaces}%
\gdef\CodeSpacesGrey{%
\def\gmd@DoTeXCodeSpace{%
\obeyspaces\def {\texttt{\color{gray}\char`\ }}}%
\def\gmd@texcodespace{\texttt{\color{gray}\char`\ }}}%
\end{obeyspaces}
\CodeSpacesGrey

\let\pkg\textsf
\def\pkgopt#1{\texttt{[#1]}}

\def\PDF{\textsc{pdf}}
\def\PS{\textsc{ps}}
\def\DVI{\textsc{dvi}}
\def\EPS{\textsc{eps}}

\usepackage{amsmath}
\usepackage{pstool}
\usepackage[T1]{fontenc}
\usepackage{microtype}
\usepackage{lmodern}
\usepackage[sc,osf]{mathpazo}
\linespread{1.1}
\GetFileInfo{pstool.sty}
\date{\fileversion\qquad\filedate}
\begin{document}

\title{The pstool package}
\author{Will Robertson and Zebb Prime}
\maketitle

\tableofcontents

\part{Documentation}

\section{Introduction}

While pdf\/\LaTeX\ is a great improvement in many ways over the `old method' of \DVI$\to$\PS$\to$\PDF, it loses the ability to interface with a generic PostScript workflow, used to great effect in numerous packages, most notably \pkg{PSTricks} and \pkg{psfrag}.

Until now, the best way to use these packages while running pdf\/\LaTeX\ has been to use the \pkg{pst-pdf} package, which processes the entire document through a filter, sending each relevant PostScript environment through \DVI$\to$\PS$\to$\PDF. The resulting \PDF\ versions of each image are then included into the pdf\/\LaTeX\ document. The \pkg{auto-pst-pdf} package provided a wrapper to execute this separate process automatically.

The disadvantage in this route is that for every document compilation, \emph{every} graphic must be re-processed. The \pkg{pstool} package uses a different approach to allow each graphic to be processed only as-needed, speeding up and simplifying the typesetting of the main document.

\section{Processing modes}

The generic command provided by this package is
\begin{center}
  \cmd\pstool\arg[graphicx options]\arg{filename}\arg{input definitions}
\end{center}
It converts the graphic \<filename>\texttt{.eps} to \<filename>\texttt{.pdf} through its own, unique, \DVI$\to$\PS$\to$\PDF\ workflow using the preamble of the main document, and inserts it with optional \<graphicx options>. The third argument allows arbitrary \<input definitions> (such as \cmd\psfrag\ directives) to be inserted before the figure as it is processed.

By default it can be used in the following modes:
\begin{description}
\item[\cs{pstool}] Process the graphic \<filename> if no \PDF\ of the same name exists, or the source \EPS\ file is \emph{newer} than the \PDF;
\item[\cs{pstool*}] Always process this figure; and,
\item[\cs{pstool!}] Never process this figure.
\end{description}

The package accepts options to override the above:
\begin{description}
\item[\pkgopt{process=auto}] This is the default as described above;
\item[\pkgopt{process=all}] All \cmd\pstool\ graphics are processed regardless of suffix; and,
\item[\pkgopt{process=none}] No \cmd\pstool\ graphics are processed.%
\footnote{If \pkg{pstool} is loaded in a \LaTeX\ document in \DVI\ mode, this is the option that is used since no external processing is required for these graphics.}
\end{description}

It is possible to define higher-level commands with \cmd\pstool\ for including specific types of \EPS\ graphics that take advantage of \pkg{psfrag}. As an example, this package defines the following commands. These commands all support the \verb|*| or \verb|!| suffices.
\begin{description}
\item[{\cmd\epsfig\arg[opts]\arg{filename}}]
Insert a plain \EPS\ figure. It is more convenient than using, for example, the \pkg{epstopdf} package since it will regenerate the \PDF\ if the \EPS\ file changes.

\item[{\cmd\psfragfig\arg[opts]\arg{filename}}]
Insert an \EPS\ file with \pkg{psfrag} definitions contained within the file \<filename>\texttt{-psfrag.tex}. (Accepts an optional braced argument as shown next.)

\item[{\cmd\psfragfig\arg[opts]\arg{filename}\arg{input definitions}}]
Insert an \EPS\ file with \pkg{psfrag} definitions contained either/or within the file \<filename>\texttt{-psfrag.tex} and supplied by the third argument \<input definitions>.

\item[{\cmd\laprintfig\arg[opts]\arg{filename}}]
Insert figures that have been produced with \textsc{Matlab}'s \pkg{laprint} package.

\item[{\cmd\mathpsfragfig\arg[opts]\arg{filename}}]
Insert figures that have been produced with \textsc{Mathematica}'s \pkg{MathPSfrag} package.
\end{description}

\section{Cropping graphics}
Graphics are cropped to the appropriate size with the \pkg{preview} package. Sometimes, however, this will not be good enough when an inserted label protrudes from the natural bounding box of the figure. A good way to solve this problem is to use the \pkg{pdfcrop} program (requires a Perl installation under Windows). This can be activated in \pkg{pstool} with the \pkgopt{pdfcrop} package option.

\section{Todo}
\begin{enumerate}
\item Test \cmd\laprint, \cmd\psfragfig, \cmd\matlabfig, \cmd\mathfig,
       especially with figures in a relative path.
\item Cleanup temporary files (straight from \pkg{auto-pst-pdf}).
\item Generalise "olding" code for multiple files.
\item Support optional \<input definitions> for all user commands??
\item (Maybe) support \pkg{epstool} for cropping the graphics.
\item Direct support for \cmd\includegraphics\ with \EPS\ files.
\item Check for correct behaviour in shells other than bash.
\item More flexible usage (support things like \verb|\begin{postscript}| in \pkg{pst-pdf}).
\item \pkg{mylatex} integration.
\end{enumerate}

\part{Implementation}
\parindent=0pt
\DocInput{pstool.sty}
\end{document}
